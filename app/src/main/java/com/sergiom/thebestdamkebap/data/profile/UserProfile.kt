package com.sergiom.thebestdamkebap.data.profile

import com.google.firebase.firestore.ServerTimestamp
import java.util.Date

/**
 * Modelo de perfil de usuario almacenado en Firestore en `/users/{uid}`.
 *
 * Prop√≥sito:
 * - Centralizar datos b√°sicos del usuario visibles/ed itables desde la app.
 * - Desacoplar la UI de los detalles de Firestore (timestamps, tipos, etc.).
 *
 * Notas de dise√±o:
 * - `email` est√° **desnormalizado** (copiado desde Auth) para facilitar listados/consultas
 *   en otros clientes (web/backoffice) sin tener que leer Auth.
 * - `birthDate` se guarda como `Date` (equivalente a Timestamp en Firestore). La UI lo
 *   formatea seg√∫n locale.
 * - `defaultAddressId` guarda el **id** de la direcci√≥n por defecto en
 *   `/users/{uid}/addresses/{addressId}`.
 * - `createdAt` y `updatedAt` se rellenan en servidor con `@ServerTimestamp`.
 *
 * Serializaci√≥n:
 * - Es un `data class` con **valores por defecto**, lo que permite a Firestore
 *   instanciarlo aunque falten campos en el documento.
 */
data class UserProfile(
    /** UID del usuario (igual que Auth). */
    val uid: String = "",
    /** Email de contacto/Acceso (puede ser `null` si la cuenta es invitado o se desvincul√≥). */
    val email: String? = null,
    /** Nombre de pila (opcional). */
    val givenName: String? = null,
    /** Apellidos (opcional). */
    val familyName: String? = null,
    /** Tel√©fono de contacto (opcional). */
    val phone: String? = null,
    /** Fecha de nacimiento (opcional). */
    val birthDate: Date? = null,
    /** Id de la direcci√≥n predeterminada en la subcolecci√≥n `addresses` (opcional). */
    val defaultAddressId: String? = null,

    /** Marca de creaci√≥n (servidor). Solo lectura en cliente. */
    @ServerTimestamp var createdAt: Date? = null,
    /** Marca de √∫ltima actualizaci√≥n (servidor). Solo lectura en cliente. */
    @ServerTimestamp var updatedAt: Date? = null
)

/**
 * Entrada de **actualizaci√≥n parcial** de perfil (merge).
 *
 * Sem√°ntica actual (seg√∫n tu `FirebaseProfileRepository`):
 * - Un campo con `null` significa **‚Äúno tocar‚Äù** ese valor en Firestore.
 * - Si el valor viene con texto vac√≠o desde la UI, el caso de uso lo normaliza a `null`,
 *   por lo que **tampoco** lo borra. (Queda pendiente soportar borrado expl√≠cito).
 *
 * üí° Si quieres que ‚Äúvaciar‚Äù un campo en la UI se traduzca en **borrarlo** en Firestore,
 *   ajusta el repositorio para enviar `FieldValue.delete()` cuando el input venga ‚Äúvac√≠o‚Äù.
 *   (Puedo pasarte el patch cuando quieras).
 */
data class ProfileInput(
    val givenName: String? = null,
    val familyName: String? = null,
    val phone: String? = null,
    /** Epoch millis para la fecha de nacimiento; `null` ‚áí no cambiar. */
    val birthDateMillis: Long? = null,
)
